
package org.openrefine.importers;

import java.io.InputStream;
import java.util.function.Supplier;

import org.openrefine.ProjectMetadata;
import org.openrefine.importing.ImportingJob;
import org.openrefine.model.Runner;
import org.openrefine.model.Grid;

import com.fasterxml.jackson.databind.node.ObjectNode;

/**
 * A base class for importers which read their files in binary mode (as an {@link java.io.InputStream}).
 */
public abstract class InputStreamImporter extends ImportingParserBase {

    /**
     * Parses one file, read from an {@link InputStream} object, into a Grid.
     * 
     * @param runner
     *            the runner to use (the returned Grid will be generated by it)
     * @param metadata
     *            the project metadata associated with the project to parse (which can be modified by the importer)
     * @param job
     *            the importing job where this import is being done
     * @param fileSource
     *            the path or source of the file (could be "clipboard" or a URL as well)
     * @param archiveFileName
     *            the path or source of the archive which contained this file
     * @param inputStream
     *            the input stream where to read the data from
     * @param limit
     *            the maximum number of rows to read
     * @param options
     *            any options passed to the importer as a JSON payload
     * 
     * @return a parsed Grid
     */
    public abstract Grid parseOneFile(
            Runner runner,
            ProjectMetadata metadata,
            ImportingJob job,
            String fileSource,
            String archiveFileName,
            Supplier<InputStream> inputStream, long limit, ObjectNode options) throws Exception;

}
