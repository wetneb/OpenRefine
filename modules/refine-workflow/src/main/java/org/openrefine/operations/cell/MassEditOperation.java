/*

Copyright 2010, Google Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

    * Redistributions of source code must retain the above copyright
notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above
copyright notice, this list of conditions and the following disclaimer
in the documentation and/or other materials provided with the
distribution.
    * Neither the name of Google Inc. nor the names of its
contributors may be used to endorse or promote products derived from
this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,           
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY           
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

*/

package org.openrefine.operations.cell;

import java.io.Serializable;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import org.openrefine.browsing.EngineConfig;
import org.openrefine.expr.ExpressionUtils;
import org.openrefine.model.Cell;
import org.openrefine.model.ColumnInsertion;
import org.openrefine.model.ColumnModel;
import org.openrefine.model.Record;
import org.openrefine.model.Row;
import org.openrefine.model.RowInRecordMapper;
import org.openrefine.model.changes.ChangeContext;
import org.openrefine.operations.ExpressionBasedOperation;
import org.openrefine.operations.OnError;
import org.openrefine.operations.exceptions.OperationException;
import org.openrefine.overlay.OverlayModel;
import org.openrefine.util.ParsingUtilities;
import org.openrefine.util.StringUtils;

/**
 * Edits values in a column, by replacing some values by others. The source value can be generated by an expression.
 *
 */
public class MassEditOperation extends ExpressionBasedOperation {

    final protected List<Edit> _edits;

    // initialized lazily
    protected Map<String, Serializable> fromTo = null;

    static public class Edit {

        @JsonProperty("from")
        final public List<String> from;
        @JsonProperty("fromBlank")
        final public boolean fromBlank;
        @JsonProperty("fromError")
        final public boolean fromError;
        @JsonProperty("to")
        final public Serializable to;
        @JsonIgnore // because included later
        final public String type;

        public Edit(
                List<String> from,
                boolean fromBlank,
                boolean fromError,
                Serializable to) {
            this.from = from;
            this.fromBlank = fromBlank || (from.size() == 1 && from.get(0).length() == 0);
            this.fromError = fromError;
            this.to = to;
            this.type = to instanceof OffsetDateTime ? "date" : null;
        }

        @JsonCreator
        public static Edit deserialize(
                @JsonProperty("from") List<String> from,
                @JsonProperty("fromBlank") boolean fromBlank,
                @JsonProperty("fromError") boolean fromError,
                @JsonProperty("to") Object to,
                @JsonProperty("type") String type) {
            Serializable serializable = (Serializable) to;
            if ("date".equals(type)) {
                serializable = ParsingUtilities.stringToDate((String) to);
            }
            return new Edit(from == null ? new ArrayList<>() : from,
                    fromBlank, fromError, serializable);
        }

        @JsonProperty("type")
        @JsonInclude(JsonInclude.Include.NON_NULL)
        public String getType() {
            return type;
        }
    }

    @JsonCreator
    public MassEditOperation(
            @JsonProperty("engineConfig") EngineConfig engineConfig,
            @JsonProperty("columnName") String columnName,
            @JsonProperty("expression") String expression,
            @JsonProperty("edits") List<Edit> edits) {
        super(engineConfig, expression, columnName, OnError.StoreError, 0);
        _edits = edits;
    }

    @JsonProperty("expression")
    public String getExpression() {
        return _expression;
    }

    @JsonProperty("edits")
    public List<Edit> getEdits() {
        return _edits;
    }

    @JsonProperty("columnName")
    public String getColumnName() {
        return _baseColumnName;
    }

    @Override
    public String getDescription() {
        return "Mass edit cells in column " + _baseColumnName;
    }

    @Override
    public List<ColumnInsertion> getColumnInsertions() {
        return Collections.singletonList(
                ColumnInsertion.replacement(_baseColumnName));
    }

    @Override
    protected boolean preservesRecordStructure(ColumnModel columnModel) {
        return columnModel.getKeyColumnIndex() != columnModel.getColumnIndexByName(_baseColumnName);
    }

    @Override
    protected RowInRecordMapper getPositiveRowMapper(ColumnModel columnModel, Map<String, OverlayModel> overlayModels,
            long estimatedRowCount, ChangeContext context) throws OperationException {
        int baseColumnIndex = columnModel.getColumnIndexByName(_baseColumnName);
        Map<String, Serializable> fromTo = new HashMap<>();
        Serializable fromBlankTo = null;
        Serializable fromErrorTo = null;

        for (Edit edit : _edits) {
            for (String s : edit.from) {
                fromTo.put(s, edit.to);
            }

            // the last edit wins
            if (edit.fromBlank) {
                fromBlankTo = edit.to;
            }
            if (edit.fromError) {
                fromErrorTo = edit.to;
            }
        }
        return new Joiner(super.getPositiveRowMapper(columnModel, overlayModels, estimatedRowCount, context),
                baseColumnIndex, fromTo, fromBlankTo, fromErrorTo);
    }

    private static class Joiner extends RowInRecordMapper {

        private static final long serialVersionUID = 749899770859402444L;

        private final RowInRecordMapper parentMapper;
        private final int baseColumnIndex;
        private final Map<String, Serializable> fromTo;
        private final Serializable fromBlankTo;
        private final Serializable fromErrorTo;

        public Joiner(RowInRecordMapper parentMapper, int baseColumnIndex, Map<String, Serializable> fromTo, Serializable fromBlankTo,
                Serializable fromErrorTo) {
            this.baseColumnIndex = baseColumnIndex;
            this.parentMapper = parentMapper;
            this.fromTo = fromTo;
            this.fromBlankTo = fromBlankTo;
            this.fromErrorTo = fromErrorTo;
        }

        @Override
        public Row call(Record record, long rowId, Row row) {
            Row evaluated = parentMapper.call(record, rowId, row);
            Cell cell = evaluated.getCell(0);
            if (cell != null && cell.isPending()) {
                return row;
            }
            Cell newCell = baseColumnIndex == -1 ? Cell.NULL : row.getCell(baseColumnIndex);
            Object v = cell == null ? null : cell.getValue();
            if (ExpressionUtils.isError(v)) {
                if (fromErrorTo != null) {
                    newCell = new Cell(fromErrorTo, (cell != null) ? cell.recon : null);
                }
            } else if (ExpressionUtils.isNonBlankData(v)) {
                String from = StringUtils.toString(v);
                Serializable to = fromTo.get(from);
                if (to != null) {
                    newCell = new Cell(to, (cell != null) ? cell.recon : null);
                }
            } else {
                if (fromBlankTo != null) {
                    newCell = new Cell(fromBlankTo, (cell != null) ? cell.recon : null);
                }
            }
            return new Row(Collections.singletonList(newCell), row.flagged, row.starred);
        }

        @Override
        public boolean preservesRecordStructure() {
            return parentMapper.preservesRecordStructure();
        }

    }
}
